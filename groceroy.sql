create database if not exists GSM;
use gsm;
-- suppliers table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);
alter table supplier modify column sup_name varchar(150);
-- categories table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(100)
);

-- employees table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- customers table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- products table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10 , 2 ),
    FOREIGN KEY (sup_id)
        REFERENCES supplier (sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id)
        REFERENCES categories (cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- orders table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id)
        REFERENCES customers (cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id)
        REFERENCES employees (emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10 , 2 ),
    total_price DECIMAL(10 , 2 ),
    FOREIGN KEY (ord_id)
        REFERENCES orders (ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id)
        REFERENCES products (prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
SELECT 
    *
FROM
    customers;
SELECT 
    *
FROM
    categories;
SELECT 
    *
FROM
    employees;
SELECT 
    *
FROM
    order_details;
SELECT 
    *
FROM
    orders;
SELECT 
    *
FROM
    products;
SELECT 
    *
FROM
    supplier;


-- 1️. Customer Insights
-- How many unique customers have placed orders?
SELECT 
    COUNT(DISTINCT (c.cust_id)) as total_no_of_cust
FROM
    customers c
        JOIN
    orders o ON o.cust_id = c.cust_id;

-- Which customers have placed the highest number of orders?
SELECT 
    c.cust_id, c.cust_name, COUNT(o.ord_id) AS number_of_orders
FROM
    customers c
        JOIN
    orders o ON o.cust_id = c.cust_id
GROUP BY c.cust_id
ORDER BY number_of_orders DESC
limit 1;

-- What is the total and average purchase value per customer?
SELECT 
    c.cust_id,
    c.cust_name,
    SUM(od.total_price) AS total_purchase_amount,
    AVG(total_price) AS avg_purchase_amount
FROM
    customers c
        JOIN
    orders o ON o.cust_id = c.cust_id
        JOIN
    order_details od ON od.ord_id = o.ord_id
GROUP BY c.cust_id
;

-- Who are the top 5 customers by total purchase amount?
SELECT 
    c.cust_id,
    c.cust_name,
    SUM(od.total_price) AS total_purchase_amount
FROM
    customers c
        JOIN
    orders o ON o.cust_id = c.cust_id
        JOIN
    order_details od ON od.ord_id = o.ord_id
GROUP BY c.cust_id
ORDER BY total_purchase_amount DESC
LIMIT 5;


-- 2. Product Performance
-- How many products exist in each category?
SELECT 
    c.cat_id, COUNT(*) AS number_of_products
FROM
    categories c
        LEFT JOIN
    products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id;

-- What is the average price of products by category?
SELECT 
    cat_id, ROUND(AVG(price), 3) AS average_price
FROM
    products
GROUP BY cat_id;

-- Which products have the highest total sales volume (by quantity)?
SELECT 
    p.prod_id, p.prod_name, SUM(od.quantity) AS total_sales
FROM
    products p
        JOIN
    order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id
ORDER BY total_sales DESC
LIMIT 1;

-- What is the total revenue generated by each product?
SELECT 
    p.prod_id, p.prod_name, SUM(od.total_price) AS total_sales
FROM
    products p
        JOIN
    order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id;

-- How do product sales vary by category and supplier?
SELECT 
    p.sup_id, p.cat_id, SUM(od.total_price) AS total_price
FROM
    products p
        JOIN
    order_details od ON p.prod_id = od.prod_id
GROUP BY p.cat_id , p.sup_id;


-- 3. Sales and Order Trends
-- Analyze business performance through orders and revenue over time.
-- How many orders have been placed in total?
SELECT 
    COUNT(ord_id) AS total_orders
FROM
    order_details;

-- What is the average value per order?
SELECT 
    ord_id, ROUND(AVG(total_price), 2) AS avg_price
FROM
    order_details
GROUP BY ord_id;

-- On which dates were the most orders placed?
SELECT 
    *
FROM
    order_details;
select o.ord_date,count(o.ord_id) as order_count from (select *,str_to_date(order_date,"%m/%d/%y") as ord_date from orders) as o
join order_details od on o.ord_id=od.ord_id
group by o.ord_date
order by order_count desc
limit 1;

-- What are the monthly trends in order volume and revenue?
SELECT 
    DATE_FORMAT(ord_date, '%m') AS months,
    COUNT(o.ord_id) AS ord_count,
    SUM(od.total_price) AS monthly_revenue
FROM
    (SELECT 
        *, STR_TO_DATE(order_date, '%m/%d/%y') AS ord_date
    FROM
        orders) AS o
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY months
ORDER BY months;

-- How do order patterns vary across weekdays and weekends?
SELECT 
    CASE
        WHEN DAYOFWEEK(od.ord_date) IN (1 , 7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    COUNT(od.ord_id) AS total_orders,
    SUM(total_price) AS total_revenue
FROM
    (SELECT 
        *, STR_TO_DATE(order_date, '%m/%d/%y') AS ord_date
    FROM
        orders) od
        JOIN
    order_details ods ON od.ord_id = ods.ord_id
GROUP BY day_type;

-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.
-- How many suppliers are there in the database?
SELECT 
    COUNT(*) AS total_suppliers
FROM
    supplier;
    -- Which supplier provides the most products?
select s.sup_id,s.sup_name,count(p.prod_id) as total_products from supplier s
join products p on s.sup_id=p.sup_id
group by s.sup_id
order by total_products desc
limit 1;
-- What is the average price of products from each supplier?
select s.sup_name,round(avg(p.price),2) as avg_price from supplier s
join products p on s.sup_id=p.sup_id
group by s.sup_id;
-- Which suppliers contribute the most to total product sales (by revenue)?
select s.sup_id,s.sup_name,sum(od.total_price) as revenue_by_sup from supplier s 
join products p on p.prod_id=s.sup_id
join order_details od on od.prod_id=p.prod_id
group by s.sup_id
order by revenue_by_sup desc
limit 1;

-- 5️. Employee Performance
-- Assess how employees are handling and influencing sales.
-- How many employees have processed orders?
select count(distinct e.emp_id) as emp_ord_processed from employees e 
join orders o on o.emp_id=e.emp_id;

-- Which employees have handled the most orders?
select e.emp_id,e.emp_name,count(o.ord_id) as order_count from employees e
join orders o on o.emp_id=e.emp_id
group by e.emp_id
order by order_count desc
limit 1;

-- What is the total sales value processed by each employee?
select e.emp_id,e.emp_name,round(sum(od.total_price),2) as revenue_by_emp from employees e
join orders o on o.emp_id=e.emp_id
join order_details od on od.ord_id=o.ord_id
group by e.emp_id;

-- What is the average order value handled per employee?
select e.emp_id,e.emp_name,round(avg(od.total_price),2) as avg_ord_value_by_emp from employees e
join orders o on o.emp_id=e.emp_id
join order_details od on od.ord_id=o.ord_id
group by e.emp_id;


-- 6️. Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.
-- What is the relationship between quantity ordered and total price?
select quantity,total_price from order_details;

-- What is the average quantity ordered per product?
select p.prod_id,p.prod_name,round(avg(od.quantity)) as avg_quantity_by_pord from products p
join order_details od on p.prod_id=od.prod_id
group by p.prod_id;

-- How does the unit price vary across products and orders?
select p.prod_id,p.prod_name,max(od.each_price) as product_price from order_details od
join products p on od.prod_id=p.prod_id
group by p.prod_id
order by product_price desc;

